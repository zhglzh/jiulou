<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:aop="http://www.springframework.org/schema/aop"
     xmlns:tx="http://www.springframework.org/schema/tx"
     xmlns:jdbc="http://www.springframework.org/schema/jdbc"
     xmlns:context="http://www.springframework.org/schema/context"
     xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"
     default-lazy-init="true">

    <!-- 加载properties文件   -->
    <bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"  lazy-init="false">  
		<property name="locations">
			<list>
				<value>classpath:app.properties</value>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>
	
    <!-- transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- enable component scanning get services\daos-->    
	<context:component-scan base-package="org.jiulou">
		<context:include-filter type="regex" expression="\.service\.impl.*"/>
		<context:include-filter type="regex" expression="\.dao.impl.*"/>
	</context:component-scan>

    <!-- 配置sqlSessionFactory工厂 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="org.jiulou.vo" />
		<property name="configLocation" value="classpath:dao/mybatis.xml"/>
        <!-- mapper和resultmap配置路径 -->
        <property name="mapperLocations">
            <list>
                <!-- load mapper -->
                <value>classpath:org/jiulou/dao/*Mapper.xml</value>
            </list>
        </property>
	</bean>

    <!-- scan for mappers with SqlMapper interface,and let them be autowired -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="org.jiulou.dao.impl" />
        <property name="markerInterface" value="org.jiulou.dao.GeneralDao"/>
    </bean>
	
	 <!-- bonecp 配置datasour数据源 -->
    <bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource"  
            destroy-method="close">
            <!-- 数据库驱动 -->  
            <property name="driverClass" value="${jdbc.driverClassName}" />  
            <!-- 相应驱动的jdbcUrl,你懂的 -->  
            <property name="jdbcUrl" value="${jdbc.url}" />  
            <!-- 数据库的用户名 -->  
            <property name="username" value="${jdbc.username}" />
            <!-- 数据库的密码 -->  
            <property name="password" value="${jdbc.password}" />
            <!-- 检查数据库连接池中空闲连接的间隔时间，单位是分，默认值：240，如果要取消则设置为0 -->  
            <property name="idleConnectionTestPeriodInMinutes" value="240" />  
            <!-- 连接池中未使用的链接最大存活时间，单位是分，默认值：60，如果要永远存活设置为0 -->  
            <property name="idleMaxAgeInMinutes" value="60" />  
            <!-- 每个分区最大的连接数 -->  
            <property name="maxConnectionsPerPartition" value="${jdbc.maxPoolSize}" />  
            <!-- 每个分区最小的连接数 -->  
            <property name="minConnectionsPerPartition" value="${jdbc.minPoolSize}" />  
            <!-- 分区数 ，默认值2，最小1，推荐3-4，视应用而定-->  
            <property name="partitionCount" value="2" />  
            <!-- 每次去拿数据库连接的时候一次性要拿几个,默认值：2 -->  
            <property name="acquireIncrement" value="2" />  
            <!-- 缓存prepared statements的大小，默认值：0 -->
            <property name="statementsCacheSize" value="10" />
            <!-- 每个分区释放链接助理进程的数量，默认值：3，除非你的一个数据库连接的时间内做了很多工作，不然过多的助理进程会影响你的性能 -->  
            <property name="releaseHelperThreads" value="3" />
        </bean>
        
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED"
				rollback-for="org.springframework.dao.DataAccessException,java.lang.IllegalArgumentException,java.io.IOException,java.lang.RuntimeException" />
			<tx:method name="delete*" propagation="REQUIRED"
				rollback-for="org.springframework.dao.DataAccessException,java.lang.IllegalArgumentException,java.io.IOException,java.lang.RuntimeException" />
			<tx:method name="update*" propagation="REQUIRED"
				rollback-for="org.springframework.dao.DataAccessException,java.lang.IllegalArgumentException,java.io.IOException,java.lang.RuntimeException" />
			<tx:method name="biz*" propagation="REQUIRED"
				rollback-for="org.springframework.dao.DataAccessException,java.lang.IllegalArgumentException,java.io.IOException,java.lang.RuntimeException" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!--
		ensure that the above transactional advice runs for any execution of
		an operation defined by the FooService interface
	-->
	<aop:config>
		<aop:pointcut id="ordinaryService"
			expression="execution(* com.xiamen.service.impl.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="ordinaryService" />
	</aop:config>
	        
    </beans>